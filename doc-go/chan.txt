#chan
//这里的s 相当于 <- strings，只有赋值之后才能读取到，否则一直阻塞
strings := make(chan string)
for s := range strings {
}

#
struch{}代表不包含任何字段的结构体类型，也可称为空结构体类型。在go语言中，空结构体类型是不占用系统内存的，并且所有该类型的变量都拥有相同的内存地址。
建议用于传递信号的通道都以struct{}作为元素类型，除非需要传递更多的信息

#
syncChan1 := make(chan struct{},1)  //接收同步变量  
syncChan2 := make(chan struct{},2) //主线程启动了两个goruntime线程，
<- syncChan1  //表示可以开始接收数据了，否则等待
syncChan1 <- struct{}{}  //发送操作

#//主线程等待发送线程和接收线程结束后再结束
#https://blog.csdn.net/qq_25392761/article/details/80206796
go func(){
syncChan2 <- struct{}{}
}()
<- syncChan2

#chan用于两个goruntime之间通信
struch{}代表不包含任何字段的结构体类型，也可称为空结构体类型。在go语言中，空结构体类型是不占用系统内存的，并且所有该类型的变量都拥有相同的内存地址。建议用于传递信号的通道都以struct{}作为元素类型，除非需要传递更多的信息
发送方向通道发送的值会被复制，接收方接收到的总是该值得副本，而不是该值本身。经由通道传递的值最少会被复制一次，最多会被复制两次。例如，当向一个已空的通道发送值，且已有至少一个接收方因此等待时，该通道会绕过本身的缓冲队列，直接把这个值复制给最早等待的那个接收方，这种情况传递的值只复制一次；当从一个已满的通道接收值，且已有至少一个发送方因此等待时，该通道会把缓冲队列中最早进入的那个值复制给接收方，再把最早等待的发送方要发送的数据复制到那个值得原先位置上（通道的缓冲队列属于环形队列，这样做是没有问题的），这种情况传递的值复制两次。
通道传递是复制传递的值。因此如果传递的是值类型，接收方对该值得修改不会影响发送方持有的值；如果传递的是引用类型，则发送方或者接收方对该对象的修改会影响双方所持有的对象

#chan引用传递
上述代码通道中传递的是map类型，属于引用类型，因此接收方对元素值得修改会影响到发送方持有的值
调用close可以关闭通道。注意：师徒向一个已经关闭的通道发送元素值，会让发送操作引发运行时恐慌。因此一定要在确保安全的前提下关闭通道。
无论怎么样都不应该在接收端关闭通道。因为在接收端通常无法判断发送端是否还会向该通道发送元素值。
在发送端关闭通道不会对接收端的接收操作产生什么影响。如果通道在被关闭时其中仍有元素值，接收端仍然可以接收，病根据接收表达式的第二个结果值判断通道是否关闭或者是否有元素可取
内建函数len和cap可用于通道之上。len表示获取通道中当前元素的数量，cap表示获取通道的容量。通道的长度随着通道中拥有的元素数量而变化，而通道的容量是在初始化的时候确定的，之后不会再修改


#for语句与channel
当定义chan大小为1时，容量为1，表示缓冲大小为1；当定义chan大小为0时，容量为0，表示该通道没有缓冲区，发送方发送一个值后需要等待接收方接收才可以发送下一个值
for语句中可以使用range子句从通道中持续不断地接收数据。当通道还未被初始化或者通道中没有任何元素时，for语句所在的goruntime会陷入阻塞，阻塞的具体位置在其中的range子句处。for语句会不断地尝试从通道中接收元素，直到该通道关闭

#单向通道
单向通道分为发送通道和接收通道。需要注意的是，无论哪种单向通道，都不应该出现在变量的声明中，否则没有意义。单向通道一般都是用在函数参数中，它由双向通道变换而来，表示该函数作用域内，只能对该通道进行发送或者接收操作。
在接口或者函数参数中定义单向通道，也可以在返回值中定义单向通道。函数或者方法的返回值为单向通道可以约束调用该函数或者方法的结果值的使用方式】

#select语句与channel
select语句是一种仅能用于通道发送和接收操作的专用语句。
在开始执行select语句的时候，所有跟在case关键字右边的发送语句或者接收语句中的通道表达式和元素表达式都会先求值（求值的顺序是从左到右、从上到下），无论它们所在的case是否有可能被选中都是会执行
在执行select语句的时候，运行时系统会自上而下地判断每个case中的发送或接收操作是否可以立即执行。这里的立即执行指的是当前goruntime不会因此操作而被阻塞。只要发现有一个case上的判断是肯定的，则该case就会被选中；如果有多个case被选中，则系统会通过一个伪随机算法选中一个case；如果都没有选中则执行default语句；如果没有default语句，则当前goruntime会在select语句处阻塞，直到至少有一个case中的发送或者接收操作可以立即执行为止
select语句中的case以及default语句之间位置没有前后

