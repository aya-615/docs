package main

import (
        "fmt"
        "log"
        "net/http"

        "github.com/emicklei/go-restful"
        restfulspec "github.com/emicklei/go-restful-openapi"
        "github.com/go-openapi/spec"
)

// JobResource is the REST layer to the Job domain
type JobResource struct {
        // normally one would use DAO (data access object)
        jobs map[string]Job
}

// WebService creates a new service that can handle REST requests for Job resources.
func (jr JobResource) WebService() *restful.WebService {
        ws := new(restful.WebService)
        ws.
                Path("/api").
                Consumes(restful.MIME_JSON, restful.MIME_JSON).
                Produces(restful.MIME_JSON, restful.MIME_JSON) // you can specify this per route as well

        tags := []string{"jobs"}

        ws.Route(ws.GET("/job").To(jr.findAllJob).
                // docs
                Doc("get all job").
                Metadata(restfulspec.KeyOpenAPITags, tags).
                Writes([]Job{}).
                Returns(200, "OK", []Job{}))

        ws.Route(ws.GET("/job/{job-id}").To(jr.findJob).
                // docs
                Doc("get a job").
                Param(ws.PathParameter("job-id", "identifier of the job").DataType("string").DefaultValue("")).
                Metadata(restfulspec.KeyOpenAPITags, tags).
                Writes(Job{}). // on the response
                Returns(200, "OK", Job{}).
                Returns(404, "Not Found", nil))

        ws.Route(ws.PUT("/status/{job-id}").To(jr.updateJob).
                // docs
                Doc("update a job").
                Param(ws.PathParameter("job-id", "identifier of the job").DataType("string")).
                Metadata(restfulspec.KeyOpenAPITags, tags).
                Reads(Job{})) // from the request

        ws.Route(ws.PUT("").To(jr.createJob).
                // docs
                Doc("create a job").
                Metadata(restfulspec.KeyOpenAPITags, tags).
                Reads(Job{})) // from the request

        ws.Route(ws.DELETE("/{job-id}").To(jr.removeJob).
                // docs
                Doc("delete a job").
                Metadata(restfulspec.KeyOpenAPITags, tags).
                Param(ws.PathParameter("job-id", "identifier of the job").DataType("string")))

        return ws
}

// GET http://localhost:8080/api/job
//
func (jr JobResource) findAllJob(request *restful.Request, response *restful.Response) {
        list := []Job{}
        for _, each := range jr.jobs {
                list = append(list, each)
        }
        response.WriteEntity(list)
}

// GET http://localhost:8080/api/job/1
//
func (jr JobResource) findJob(request *restful.Request, response *restful.Response) {
        id := request.PathParameter("job-id")
        job := jr.jobs[id]
        if len(job.ID) == 0 {
                response.WriteErrorString(http.StatusNotFound, "Job could not be found.")
        } else {
                response.WriteEntity(job)
        }
}

// PUT http://localhost:8080/users/1
// <User><Id>1</Id><Name>Melissa Raspberry</Name></User>
//
func (jr *JobResource) updateJob(request *restful.Request, response *restful.Response) {
        id := request.PathParameter("job-id")
        fmt.Println(id)
        job := new(Job)
        err := request.ReadEntity(&job)
        if err == nil {
                jr.jobs[job.ID] = *job
                response.WriteEntity(job)
        } else {
                response.WriteError(http.StatusInternalServerError, err)
        }
}

// PUT http://localhost:8080/users/1
// <User><Id>1</Id><Name>Melissa</Name></User>
//
func (jr *JobResource) createJob(request *restful.Request, response *restful.Response) {
        job := Job{ID: request.PathParameter("job-id")}
        err := request.ReadEntity(&job)
        if err == nil {
                jr.jobs[job.ID] = job
                response.WriteHeaderAndEntity(http.StatusCreated, job)
        } else {
                response.WriteError(http.StatusInternalServerError, err)
        }
}

// DELETE http://localhost:8080/users/1
//
func (jr *JobResource) removeJob(request *restful.Request, response *restful.Response) {
        id := request.PathParameter("job-id")
        delete(jr.jobs, id)
}

func main() {
        jr := JobResource{map[string]Job{}}
        restful.DefaultContainer.Add(jr.WebService())

        config := restfulspec.Config{
                WebServices:                   restful.RegisteredWebServices(), // you control what services are visible
                APIPath:                       "/apidocs.json",
                PostBuildSwaggerObjectHandler: enrichSwaggerObject}
        restful.DefaultContainer.Add(restfulspec.NewOpenAPIService(config))

        // Optionally, you can install the Swagger Service which provides a nice Web UI on your REST API
        // You need to download the Swagger HTML5 assets and change the FilePath location in the config below.
        // Open http://localhost:8080/apidocs/?url=http://localhost:8080/apidocs.json
        http.Handle("/apidocs/", http.StripPrefix("/apidocs/", http.FileServer(http.Dir("/Users/emicklei/Projects/swagger-ui/dist"))))

        log.Printf("start listening on localhost:6780")
        log.Fatal(http.ListenAndServe(":6780", nil))
}

func enrichSwaggerObject(swo *spec.Swagger) {
        swo.Info = &spec.Info{
                InfoProps: spec.InfoProps{
                        Title:       "UserService",
                        Description: "Resource for managing Users",
                        Contact: &spec.ContactInfo{
                                Name:  "john",
                                Email: "john@doe.rp",
                                URL:   "http://johndoe.org",
                        },
                        License: &spec.License{
                                Name: "MIT",
                                URL:  "http://mit.org",
                        },
                        Version: "1.0.0",
                },
        }
        swo.Tags = []spec.Tag{spec.Tag{TagProps: spec.TagProps{
                Name:        "users",
                Description: "Managing users"}}}
}

// Job is just a sample type
type Job struct {
        ID       string `json:"id" description:"identifier of the job"`
        Bid      string `json:"bid" description:"batch id" default:"20190129080000"`
        Sys      string `json:"sys" description:"sys of the job group" default:"NSPDM"`
        Job      string `json:"job" description:"job name"`
        Cal_Date string `json:"cal_date" description:"job running date"`
        Cal_Time string `json:"cal_time" description:"job running time"`
        Server   string `json:"server" description:"job running on server"`
}
